#pragma kernel GenerateMesh

#include "Includes\ChunkData.hlsl"
#include "Includes\MarchingTable.compute"


struct Triangle {
    float3 v0, v1, v2;
};

RWStructuredBuffer<float> points;
AppendStructuredBuffer<Triangle> triangles;

float3 interp(float3 edgeVertex1, float valueAtVertex1, float3 edgeVertex2, float valueAtVertex2) {
    float t = (isoLevel - valueAtVertex1) / (valueAtVertex2 - valueAtVertex1);
    return edgeVertex1 + t * (edgeVertex2 - edgeVertex1);
}


[numthreads(numThreads, numThreads, numThreads)]
void GenerateMesh (uint3 id : SV_DispatchThreadID) {
    if (id.x >= numPointsPerAxis - 1 || id.y >= numPointsPerAxis - 1 || id.z >= numPointsPerAxis - 1) return;

    float cubeValues[8] = {
        points[indexFromCoord(id.x, id.y, id.z + 1)],
        points[indexFromCoord(id.x + 1, id.y, id.z + 1)],
        points[indexFromCoord(id.x + 1, id.y, id.z)],
        points[indexFromCoord(id.x, id.y, id.z)],
        points[indexFromCoord(id.x, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z)],
        points[indexFromCoord(id.x, id.y + 1, id.z)]
    };

    int cubeIndex = 0;
    if (cubeValues[0] < isoLevel) cubeIndex |= 1;
    if (cubeValues[1] < isoLevel) cubeIndex |= 2;
    if (cubeValues[2] < isoLevel) cubeIndex |= 4;
    if (cubeValues[3] < isoLevel) cubeIndex |= 8;
    if (cubeValues[4] < isoLevel) cubeIndex |= 16;
    if (cubeValues[5] < isoLevel) cubeIndex |= 32;
    if (cubeValues[6] < isoLevel) cubeIndex |= 64;
    if (cubeValues[7] < isoLevel) cubeIndex |= 128;

    int edges[] = triTable[cubeIndex];


    for (int i = 0; edges[i] != -1; i += 3)
    {
        // First edge lies between vertex e00 and vertex e01
        int e00 = edgeConnections[edges[i]][0];
        int e01 = edgeConnections[edges[i]][1];

        // Second edge lies between vertex e10 and vertex e11
        int e10 = edgeConnections[edges[i + 1]][0];
        int e11 = edgeConnections[edges[i + 1]][1];
        
        // Third edge lies between vertex e20 and vertex e21
        int e20 = edgeConnections[edges[i + 2]][0];
        int e21 = edgeConnections[edges[i + 2]][1];

        Triangle tri;
        tri.v0 = pointSpacing() * (interp(cornerOffsets[e00], cubeValues[e00], cornerOffsets[e01], cubeValues[e01]) + id);
        tri.v1 = pointSpacing() * (interp(cornerOffsets[e10], cubeValues[e10], cornerOffsets[e11], cubeValues[e11]) + id);
        tri.v2 = pointSpacing() * (interp(cornerOffsets[e20], cubeValues[e20], cornerOffsets[e21], cubeValues[e21]) + id);

        triangles.Append(tri);
    }
}

