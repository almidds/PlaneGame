#pragma kernel GenerateNoise

#include "Includes\ChunkData.hlsl"
#include "Includes\Noise.compute"

RWStructuredBuffer<float> _weights;
StructuredBuffer<float3> offsets;

int numOctaves;
float noiseScale;
float lacunarity;
float gain;
float weightMultiplier;
float noiseWeight;

float floorOffset;
float hardFloor;
float hardFloorWeight;

float4 params;

[numthreads(numThreads, numThreads, numThreads)]
void GenerateNoise (uint3 id : SV_DispatchThreadID) {
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
        return;
    }

    float3 _pos = chunkCentre + float3(id) * pointSpacing();
    float _noise = 0;

    float _frequency = noiseScale / 100;
    float _amplitude = 1;
    float _weight = 1;
    for (int i = 0; i < numOctaves; i++) {
        float n = snoise(_pos * _frequency + offsets[i]);
        float v = 1 - abs(n);
        v = v * v;
        v *= _weight;
        _weight = max(min(v * weightMultiplier, 1), 0);
        _noise += v * _amplitude;
        _amplitude *= gain;
        _frequency *= lacunarity;
    }

    float finalVal = -(_pos.y + floorOffset) + _noise * noiseWeight + (_pos.y%params.x) * params.y;

    if (_pos.y < hardFloor) {
        finalVal += hardFloorWeight;
    }

    _weights[indexFromCoord(id.x, id.y, id.z)] = finalVal;
}

